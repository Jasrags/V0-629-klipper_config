[gcode_macro TUNE_PRESSURE_ADVANCE]
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|default(0)|float %}
    {% set smooth_step_delta = params.SMOOTH_STEP_DELTA|default(0)|float %}
    # variables 
    {% set pressure_advance = printer.extruder.pressure_advance + step_delta %}
    {% set smooth_time = printer.extruder.smooth_time + step_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
    {action_respond_info("Tuning pressure_advance: %f -> %f, smooth_time %f -> %f" % 
        (printer.extruder.pressure_advance,pressure_advance,
        printer.extruder.smooth_time,smooth_time))}
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance} SMOOTH_TIME={smooth_time}

[gcode_macro TUNE_FAN_SPEED]
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|float %}
    # variables
    {% set new_speed = printer.fan.speed + step_delta %}
    {% set new_speed_percent = new_speed * 100 %} 
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    {action_respond_info("Tuning fan: Speed %d -> %d" % 
        (printer.fan.speed * 100,(new_speed*100)))}
    M106 S{255 * new_speed}

[gcode_macro TUNE_Z_OFFSET]
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|float %}
    # variables 
    {% set new_z_offset = printer.gcode_move.homing_origin.z + step_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    SET_GCODE_OFFSET Z_ADJUST={step_delta}
    {action_respond_info("Tuning Z offset: %f -> %f" % 
        (printer.gcode_move.homing_origin.z,new_z_offset))}


# [gcode_macro TEST_SPEED]
# description: Command to LINEAR and DIAGONAL acceleration. Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
# gcode:
#   # command params
#   {% set i = params.I|default(1)|int %}
#   {% set da = params.DIAGONAL_ACCEL|default(27000)|int %}
#   {% set la = params.LINEAR_ACCEL|default(36000)|int %}
#   # variables 
#   {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
#   {% set min_x = printer.toolhead.axis_minimum.x|float %}
#   {% set min_y = printer.toolhead.axis_minimum.y|float %}
#   {% set max_x = printer.toolhead.axis_maximum.x|float %}
#   {% set max_y = printer.toolhead.axis_maximum.y|float - boarder_delta %}
#   # features
#   {% set ena_debug = printer.save_variables.variables.debug|lower %}

#   {% if ena_debug == "true" %}
#     {action_respond_info('==== TEST_SPEED ====')}
#     {action_respond_info("i: %s" % (i))}
#     {action_respond_info("da: %s" % (da))}
#     {action_respond_info("la: %s" % (la))}
#     {action_respond_info("min_x: %s" % (min_x))}
#     {action_respond_info("min_y: %s" % (min_y))}
#     {action_respond_info("max_x: %s" % (max_x))}
#     {action_respond_info("max_y: %s" % (max_y))}
#     {action_respond_info('===============')}
#   {% endif %}

#   SAVE_GCODE_STATE NAME=TEST_SPEED
#   G28 X Y
#   GET_POSITION
#   G90
#   {% for iteration in range(i|int) %}
#     G1 X{min_x} Y{min_y} F{da}
#     G1 X{max_x} Y{max_y} F{da}
#     G1 X{min_x} Y{min_y} F{da}
#     G1 X{max_x} Y{max_y} F{da}

#     G1 X{min_x} Y{max_y} F{la}

#     G1 X{max_x} Y{min_y} F{da}
#     G1 X{min_x} Y{max_y} F{da}
#     G1 X{max_x} Y{min_y} F{da}
#     G1 X{min_x} Y{max_y} F{da}

#     G1 X{min_x} Y{min_y} F{la}
#     G1 X{max_x} Y{min_y} F{la}
#     G1 X{max_x} Y{max_y} F{la}
#     G1 X{min_x} Y{max_y} F{la}
#     G1 X{min_x} Y{min_y} F{la}
#   {% endfor %}
#   G28 X Y
#   GET_POSITION
#   RESTORE_GCODE_STATE NAME=TEST_SPEED

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
    # command params
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # variables 
    {% set bound = params.BOUND|default(20)|int %}
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info('==== TEST_SPEED ====')}
        {action_respond_info("speed: %s" % (speed))}
        {action_respond_info("iterations: %s" % (iterations))}
        {action_respond_info("accel: %s" % (accel))}
        {action_respond_info("bound: %s" % (bound))}
        {action_respond_info("min_x_y: [%s,%s]" % (min_x,min_y))}
        {action_respond_info("max_x_y: [%s,%s]" % (max_x,max_y))}
        {action_respond_info('===============')}
    {% endif %}
	

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED